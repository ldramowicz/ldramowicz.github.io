{"version":3,"sources":["components/UserList.js","components/AddUser.js","components/EditUser.js","components/GroupList.js","components/AddGroup.js","components/EditGroup.js","App.js","serviceWorker.js","index.js"],"names":["_","require","UserList","users","deleteUser","editUser","groups","sortedUsers","sortBy","Table","bordered","size","className","map","user","index","userGroups","key","lastName","firstName","userGroup","find","label","Button","variant","onClick","id","AddUser","addUser","React","useState","selected","setSelected","defaultFormInfo","setUser","error","setError","handleChange","event","target","name","value","Alert","onSubmit","preventDefault","type","onChange","isMulti","options","selectedOptions","EditUser","currentUser","setEditingUser","updateUser","filter","group","includes","onInputChange","htmlFor","GroupList","deleteGroup","editGroup","sortedGroups","AddGroup","addGroup","setGroup","EditGroup","currentGroup","setEditingGroup","updateGroup","App","usersData","groupsData","setUsers","setCurrentUser","isEditingUser","length","userIdCount","setUserIdCount","setGroups","setCurrentGroup","isEditingGroup","groupIdCount","setGroupIdCount","Tabs","defaultActiveKey","Tab","eventKey","title","updatedUser","result","updatedGroup","set","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7f509e0b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nconst _ = require('lodash');\r\n\r\nconst UserList = ({users, deleteUser, editUser, groups})  => {\r\n\r\n    const sortedUsers = _.sortBy(users, ['lastName', 'firstName']);\r\n\r\n    return <Table bordered size=\"md\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n            <th>#</th>\r\n            <th>Last Name</th>\r\n            <th>First Name</th>\r\n            <th>Groups</th>\r\n            <th>Actions</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n            {sortedUsers.map((user, index) => {\r\n                const userGroups = user.groups;\r\n                return <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{user.lastName}</td>\r\n                    <td>{user.firstName}</td>\r\n                    <td>{userGroups.map((userGroup, index) => {\r\n                        return <div key={index}>{_.find(groups, {'value':  userGroup}).label}</div>;\r\n                    })}</td>\r\n                    <td>\r\n                        <Button variant=\"outline-primary\" onClick={() => deleteUser(user.id)}>Delete User</Button>{' '}\r\n                        <Button variant=\"outline-primary\" onClick={() => editUser(user.id)}>Edit User</Button>\r\n                    </td>\r\n                </tr>\r\n            })}\r\n        </tbody>\r\n    </Table>\r\n};\r\n\r\nUserList.propTypes = {\r\n    users: PropTypes.array,\r\n    deleteUser: PropTypes.func,\r\n    editUser: PropTypes.func,\r\n    groups: PropTypes.array,\r\n};\r\n\r\nexport default UserList\r\n","import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from 'react-select';\r\nconst _ = require('lodash');\r\n\r\nconst AddUser = ({addUser, groups}) => {\r\n\r\n    const [selected, setSelected] = React.useState([]);\r\n    const defaultFormInfo = {id: null, groups: [], firstName: '', lastName: ''};\r\n    const [user, setUser] = useState(defaultFormInfo);\r\n    const [error, setError] = useState(false);\r\n\r\n    const handleChange = event => {\r\n        const {name, value } = event.target;\r\n        setUser({...user, [name]: value});\r\n    };\r\n\r\n    const handleMultiSelectChange = selectedOptions => {\r\n        setUser({...user, 'groups': _.map(selectedOptions, 'value')});\r\n        setSelected(selectedOptions)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {error && <Alert variant=\"warning\">All fields are mandatory!</Alert>}\r\n            <form\r\n                onSubmit={event => {\r\n                    event.preventDefault();\r\n                    if (!user.firstName || !user.lastName || !user.groups) {\r\n                        setError(true);\r\n                        return;\r\n                    }\r\n                    addUser(user);\r\n                    setSelected([])\r\n                    setUser(defaultFormInfo)\r\n                    setError(false);\r\n                }}\r\n            >\r\n                <div>\r\n                    <label>First Name</label>{' '}\r\n                    <input type=\"text\" name=\"firstName\" value={user.firstName} onChange={handleChange} />\r\n                </div>\r\n                <div>\r\n                    <label>Last Name</label>{' '}\r\n                    <input type=\"text\" name=\"lastName\" value={user.lastName} onChange={handleChange} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Select groups this user belongs to</label>\r\n                    <Select isMulti value={selected} options={_.sortBy(groups, ['label'])} onChange={handleMultiSelectChange} />\r\n                </div>\r\n                <Button type=\"submit\" variant=\"outline-primary\">Add User</Button>{' '}\r\n                <Button variant=\"outline-primary\" onClick={() => setUser(defaultFormInfo)}>Cancel</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nAddUser.propTypes = {\r\n    addUser: PropTypes.func,\r\n    groups: PropTypes.array,\r\n};\r\n\r\nexport default AddUser\r\n","import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Select from 'react-select';\r\n\r\nconst _ = require('lodash');\r\n\r\n\r\nconst EditUser = ({currentUser, setEditingUser, updateUser, groups}) => {\r\n\r\n    const [user, setUser] = useState({...currentUser});\r\n    const [error, setError] = useState(false);\r\n    const [selected, setSelected] = React.useState(groups.filter(group => {\r\n        return _.includes(user.groups, group.value);\r\n    }));\r\n\r\n    const onInputChange = event => {\r\n        const {name, value} = event.target;\r\n        setUser({...user, [name]: value})\r\n    };\r\n\r\n    const handleMultiSelectChange = selectedOptions => {\r\n        setUser({...user, 'groups': _.map(selectedOptions, 'value')});\r\n        setSelected(selectedOptions)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {error && <Alert variant=\"warning\">All fields are mandatory!</Alert>}\r\n            <form\r\n                onSubmit={event => {\r\n                    event.preventDefault();\r\n                    if (!user.firstName || !user.lastName || !user.groups) {\r\n                        setError(true);\r\n                        return;\r\n                    }\r\n                    updateUser(user.id, user);\r\n                    setError(false);\r\n                }}\r\n            >\r\n                <div>\r\n                    <label>First Name</label>{' '}\r\n                    <input type=\"text\" name=\"firstName\" value={user.firstName} onChange={onInputChange} />\r\n                </div>\r\n                <div>\r\n                    <label>Last Name</label>{' '}\r\n                    <input type=\"text\" name=\"lastName\" value={user.lastName} onChange={onInputChange} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"exampleFormControlSelect2\">Select groups this user belongs to</label>\r\n                    <Select isMulti value={selected} options={_.sortBy(groups, ['label'])} onChange={handleMultiSelectChange} />\r\n                </div>\r\n                <Button type=\"submit\" variant=\"outline-primary\">Update User</Button>{' '}\r\n                <Button variant=\"outline-primary\" onClick={() => setEditingUser(false)}>Cancel</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nEditUser.propTypes = {\r\n    currentUser: PropTypes.object,\r\n    setEditingUser: PropTypes.func,\r\n    updateUser: PropTypes.func,\r\n    groups: PropTypes.array,\r\n};\r\n\r\nexport default EditUser\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport Table from 'react-bootstrap/Table'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst _ = require('lodash');\r\n\r\nconst GroupList = ({groups, deleteGroup, editGroup, users})  => {\r\n\r\n    const sortedGroups = _.sortBy(groups, ['label']);\r\n\r\n    return <Table bordered size=\"md\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n            <th>#</th>\r\n            <th>Group Name</th>\r\n            <th>Users</th>\r\n            <th>Actions</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n            {sortedGroups.map((group, index) => (\r\n                <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{group.label}</td>\r\n                    <td>{users.map((user, index) => {\r\n                        return _.includes(user.groups, group.value) ?\r\n                            <div key={index}>{user.lastName + ' ' + user.firstName}</div> : null\r\n                    })}\r\n                    </td>\r\n                    <td>\r\n                        <Button variant=\"outline-primary\" onClick={() => deleteGroup(group.value)}>Delete\r\n                            Group</Button>{' '}\r\n                        <Button variant=\"outline-primary\" onClick={() => editGroup(group.value)}>Edit Group</Button>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </Table>\r\n};\r\n\r\nGroupList.propTypes = {\r\n    groups: PropTypes.array,\r\n    deleteGroup: PropTypes.func,\r\n    editGroup: PropTypes.func,\r\n    users: PropTypes.array\r\n};\r\n\r\nexport default GroupList\r\n","import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst AddGroup = ({addGroup}) => {\r\n\r\n    const defaultFormInfo = {value: null, label: ''};\r\n    const [group, setGroup] = useState(defaultFormInfo);\r\n    const [error, setError] = useState(false);\r\n\r\n    const onInputChange = event => {\r\n        const {name, value} = event.target;\r\n        setGroup({...group, [name]: value})\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {error && <Alert variant=\"warning\">All fields are mandatory!</Alert>}\r\n            <form\r\n                onSubmit={event => {\r\n                    event.preventDefault();\r\n                    if (!group.label) {\r\n                        setError(true);\r\n                        return;\r\n                    }\r\n                    addGroup(group);\r\n                    setGroup(defaultFormInfo);\r\n                    setError(false);\r\n                }}\r\n            >\r\n                <label>Group Name</label>{' '}\r\n                <input type=\"text\" name=\"label\" value={group.label} onChange={onInputChange} />{' '}\r\n                <Button type=\"submit\" variant=\"outline-primary\">Add Group</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nAddGroup.propTypes = {\r\n    addGroup: PropTypes.func,\r\n};\r\n\r\nexport default AddGroup\r\n","import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst EditGroup= ({currentGroup, setEditingGroup, updateGroup}) => {\r\n\r\n    const [group, setGroup] = useState({...currentGroup});\r\n    const [error, setError] = useState(false);\r\n\r\n    const onInputChange = event => {\r\n        const {name, value} = event.target;\r\n        setGroup({...group, [name]: value})\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {error && <Alert variant=\"warning\">All fields are mandatory!</Alert>}\r\n            <form\r\n                onSubmit={event => {\r\n                    event.preventDefault();\r\n                    if (!group.label) {\r\n                        setError(true);\r\n                        return;\r\n                    }\r\n                    updateGroup(group.value, group);\r\n                    setError(false);\r\n                }}\r\n            >\r\n                <label>Group Name</label>{' '}\r\n                <input type=\"text\" name=\"label\" value={group.label} onChange={onInputChange} />{' '}\r\n                <Button type=\"submit\" variant=\"outline-primary\">Update Group</Button>{' '}\r\n                <Button variant=\"outline-primary\" onClick={() => setEditingGroup(false)}>Cancel</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nEditGroup.propTypes = {\r\n    currentGroup: PropTypes.object,\r\n    setEditingGroup: PropTypes.func,\r\n    updateGroup: PropTypes.func,\r\n};\r\n\r\nexport default EditGroup\r\n","import React, { useState } from 'react'\nimport './App.css'\nimport UserList from './components/UserList'\nimport AddUser from \"./components/AddUser\"\nimport EditUser from \"./components/EditUser\"\nimport GroupList from './components/GroupList'\nimport AddGroup from \"./components/AddGroup\"\nimport EditGroup from \"./components/EditGroup\"\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from 'react-bootstrap/Tab'\n\nconst _ = require('lodash');\n\n\nconst App = () => {\n    const usersData = [\n        { id: 1, groups: [1, 2], firstName: 'Homer', lastName: 'Simpson' },\n        { id: 2, groups: [1], firstName:  'Maggie', lastName: 'Simpson' },\n        { id: 3, groups: [2, 3], firstName: 'Bart', lastName: 'Simpson' }\n    ];\n\n    const groupsData = [\n        { value: 1, label: 'Spanish'},\n        { value: 2, label: 'English'},\n        { value: 3, label: 'French'}\n    ];\n\n    const [users, setUsers] = useState(usersData);\n    const [currentUser, setCurrentUser] = useState({id: null, groups:[], firstName: '', lastName: ''});\n    const [isEditingUser, setEditingUser] = useState(false);\n    let [userIdCount, setUserIdCount] = useState(usersData.length);\n\n    const [groups, setGroups] = useState(groupsData);\n    const [currentGroup, setCurrentGroup] = useState({value: null, label:''});\n    const [isEditingGroup, setEditingGroup] = useState(false);\n    let [groupIdCount, setGroupIdCount] = useState(groupsData.length);\n\n    const addUser = user => {\n        user.id = ++userIdCount;\n        setUserIdCount(user.id);\n        setUsers([ ...users, user ]);\n    };\n\n    const editUser = id => {\n        let result = users.find(user => user.id === id);\n        setEditingUser(true);\n        setCurrentUser(result);\n    };\n\n    const updateUser = (id, updatedUser) => {\n        setEditingUser(false);\n        setUsers(users.map(user => (user.id === id ? updatedUser : user)));\n    };\n\n    const deleteUser = id => {\n        setUsers(users.filter(user => user.id !== id));\n    };\n\n    const addGroup = group => {\n        group.value = ++groupIdCount;\n        setGroupIdCount(group.value);\n        setGroups([ ...groups, group ]);\n    };\n\n    const editGroup = id => {\n        let result = groups.find(group => group.value === id);\n        setEditingGroup(true);\n        setCurrentGroup(result);\n    };\n\n    const updateGroup = (id, updatedGroup) => {\n        setEditingGroup(false);\n        setGroups(groups.map(group => (group.value === id ? updatedGroup : group)));\n    };\n\n    const deleteGroup = id => {\n        users.map(user => _.set(user, 'groups', user.groups.filter(userGroup => userGroup !== id)));\n        setGroups(groups.filter(group => group.value !== id));\n    };\n\n    return (\n        <div>\n            <h1 className=\"text-center\">Planned App</h1>\n            <Tabs id=\"PageTabs\" defaultActiveKey=\"users\">\n                <Tab eventKey=\"users\" title=\"Manage Users\">\n                    <div className=\"padding-1\">\n                        {isEditingUser ?\n                            <EditUser\n                                currentUser={currentUser}\n                                isEditingUser={isEditingUser}\n                                setEditingUser={setEditingUser}\n                                updateUser={updateUser}\n                                groups={groups}\n                            /> :\n                            <AddUser addUser={addUser} groups={groups}/>\n                        }\n                    </div>\n                    <UserList className=\"tab-content\"\n                              users={users}\n                              editUser={editUser}\n                              deleteUser={deleteUser}\n                              isEditingUser={isEditingUser}\n                              groups={groups}\n                    />\n                </Tab>\n                <Tab eventKey=\"groupsList\" title=\"Manage Groups\">\n                    <div className=\"padding-1\">\n                        {isEditingGroup ?\n                            <EditGroup\n                                currentGroup={currentGroup}\n                                isEditingGroup={isEditingGroup}\n                                setEditingGroup={setEditingGroup}\n                                updateGroup={updateGroup}\n                                groups={groups}\n                            /> :\n                            <AddGroup addGroup={addGroup} groups={groups}/>\n                        }\n                    </div>\n                    <GroupList className=\"tab-content\"\n                        groups={groups}\n                        editGroup={editGroup}\n                        deleteGroup={deleteGroup}\n                        users={users}\n                    />\n                </Tab>\n            </Tabs>\n        </div>\n    )\n};\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}